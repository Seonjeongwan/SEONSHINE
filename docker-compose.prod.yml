version: "3.8"

services:
  frontend:
    image: seonshinevn/seonshine_frontend:prod
    pull_policy: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./seonshine_frontend/nginx.conf:/etc/nginx/nginx.conf
      - ./seonshine_frontend/default.conf:/etc/nginx/conf.d/default.conf
      - ./seonshine_frontend/default.ssl.conf:/etc/nginx/conf.d/default.ssl.conf
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
      - ./myweb:/usr/share/nginx/html
    depends_on:
      - backend
      - fileserver
    environment:
      - NODE_ENV=production
    restart: always

  backend:
    image: seonshinevn/seonshine_backend:prod
    pull_policy: always
    environment:
      - NODE_ENV=production
      - DB_HOST=db
      - DB_USER=seonshine_mgr
      - DB_PASSWORD=seonshine@2
      - USER_DB_NAME=user_db
      - COMMON_DB_NAME=common_db
      - RESTAURANT_DB_NAME=restaurant_db
      - ORDER_DB_NAME=order_db
      - UPLOAD_API_URL=http://fileserver:4000
    ports:
      - "5050:5050"
    # command: sh -c "npm run migrate:all && npm run seed:all && npm run start"
    depends_on:
      redis:
        condition: service_started
      db:
        condition: service_healthy
    restart: always

  db:
    image: mysql:8.0.36
    ports:
      - "3306:3306"
    environment:
      - MYSQL_USER=seonshine_mgr
      - MYSQL_PASSWORD=seonshine@2
      - MYSQL_ROOT_PASSWORD=seonshine@2
    volumes:
      - mysql-data:/var/lib/mysql
      - ./seonshine_db/schema:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "mysqladmin ping -h localhost --silent"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 5s
    restart: always

  fileserver:
    image: seonshinevn/seonshine_fileserver:prod
    ports:
      - "4000:4000"
    volumes:
      - ./seonshine_fileserver/uploads:/app/uploads
    restart: always
    environment:
      - NODE_ENV=production

  portainer:
    image: portainer/portainer-ce:latest
    container_name: portainer
    command: -H unix:///var/run/docker.sock
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer_data:/data
    ports:
      - "9000:9000"
    restart: always

  redis:
    image: redis:6.2
    ports:
      - "6379:6379"

  certbot:
    image: certbot/certbot
    volumes:
      - certbot-etc:/etc/letsencrypt
      - certbot-www:/var/www/certbot
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
      - ./seonshine_frontend/default.ssl.conf:/etc/nginx/conf.d/default.ssl.conf
      - ./seonshine_frontend/renewal-hooks/deploy:/etc/letsencrypt/renewal-hooks/deploy
    entrypoint: |
      sh -c '
      if [ ! -f /etc/letsencrypt/live/seonshine.net/fullchain.pem ]; then
        certbot certonly --webroot -w /etc/letsencrypt --email seonshine.vn@gmail.com -d seonshine.net -d www.seonshine.net --agree-tos --no-eff-email;
        sh /etc/letsencrypt/renewal-hooks/deploy/reload-nginx.sh;
      fi;
      trap exit TERM;
      while :; do
        certbot renew --webroot -w /etc/letsencrypt --quiet && sh /etc/letsencrypt/renewal-hooks/deploy/reload-nginx.sh;
        sleep 86400;
      done
      '
    depends_on:
      - frontend
    restart: always

volumes:
  mysql-data:
  portainer_data:
  # certbot-etc:
  # certbot-www: