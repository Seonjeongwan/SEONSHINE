version: "3.8"

services:
  # when you want to run frontend with the docker remove comment
  # frontend:
  #   image: seonshinevn/seonshine_frontend:latest
  #   build: ./seonshine_frontend
  #   ports:
  #     - "3000:3000"
  #   volumes:
  #     - ./seonshine_frontend/src:/app/src
  #     - /app/node_modules
  #     - /app/build # Build 결과를 캐싱
  #   depends_on:
  #     - backend
  #   restart: always

  backend:
    image: seonshinevn/seonshine_backend:latest
    build: ./seonshine_backend
    environment:
      - NODE_ENV=development
      - DB_HOST=db
      - DB_USER=seonshine_mgr
      - DB_PASSWORD=seonshine@2
      - USER_DB_NAME=user_db
      - COMMON_DB_NAME=common_db
      - RESTAURANT_DB_NAME=restaurant_db
      - ORDER_DB_NAME=order_db
    ports:
      - "5050:5050"
    command: sh -c "npm run seed:all && npm start"
    depends_on:
      db:
        condition: service_healthy
    restart: always
    # env_file:
    #   - ./seonshine_backend/.env
  # stdin_open: true
  # tty: true

  db:
    image: mysql:8.0.36
    ports:
      - "3306:3306"
    environment:
      MYSQL_USER: seonshine_mgr
      MYSQL_PASSWORD: seonshine@2
      MYSQL_ROOT_PASSWORD: seonshine@2
    volumes:
      - mysql-data:/var/lib/mysql
      - ./seonshine_db/schema:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "mysqladmin ping -h localhost --silent"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 5s
    restart: always

  # fileserver:
  #   image: seonshinevn/seonshine_fileserver:latest
  #   build: ./seonshine_fileserver
  #   ports:
  #     - "4000:4000"
  #   volumes:
  #     - ./seonshine_fileserver/uploads:/app/uploads

  redis:
    image: redis:6.2
    ports:
      - "6379:6379"

volumes:
  mysql-data:
